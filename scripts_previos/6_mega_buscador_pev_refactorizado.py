# mega_buscador_pev_refactorizado.py
# VERSI√ìN REFACTORIZADA CON MEJORAS DE RENDIMIENTO, CACHING Y ESTRUCTURA
# Mejoras: Gesti√≥n de Driver en Sesi√≥n + Caching + Persistencia de Resultados + Componentes Nativos

import streamlit as st
import time
import random
import re
import pandas as pd
import matplotlib.pyplot as plt
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from deep_translator import GoogleTranslator
from datetime import datetime, timedelta
import json

# ==========================================
# CONFIGURACI√ìN INICIAL Y CARGA DE REGLAS
# ==========================================

st.set_page_config(
    page_title="Mega Buscador PEV (Refactorizado)",
    page_icon="üöÄ",
    layout="wide"
)

# NOTA: En una aplicaci√≥n ideal, estos diccionarios estar√≠an en un archivo config.json
# Por simplicidad para este script, se mantienen aqu√≠.
CRISTIAN_KEY_PHRASES = {
    "spanish": ["acceso inmediato a", "descargar ahora gratis", "m√©todo comprobado", "transforma tu vida", "descubre el secreto", "gu√≠a completa", "sistema probado", "resultados garantizados"],
    "portuguese": ["tenha acesso imediato a", "baixar agora gratis", "metodo comprovado", "transforme sua vida", "descubra o segredo", "guia completo", "sistema comprovado", "resultados garantidos"],
    "english": ["get instant access to", "download now free", "proven method", "transform your life", "discover the secret", "complete guide", "proven system", "guaranteed results"],
    "french": ["acc√®s imm√©diat √†", "t√©l√©charger maintenant gratuitement", "m√©thode prouv√©e", "transformez votre vie", "d√©couvrez le secret", "guide complet"],
    "german": ["sofortiger zugang zu", "jetzt kostenlos herunterladen", "bew√§hrte methode", "verwandeln sie ihr leben", "entdecken sie das geheimnis"]
}
COUNTRY_TIERS = {
    "tier_1": {"countries": ["US", "CA", "GB", "DE", "NL", "FR", "AU", "NZ", "BR"], "priority": "M√ÅXIMA", "scraping_intensity": "PROFUNDO", "expected_performance": "EXCELENTE", "description": "Monedas fuertes + Brasil (Hotmart HQ)"},
    "tier_2": {"countries": ["JP", "KR", "CN", "ZA"], "priority": "ALTA", "scraping_intensity": "MEDIO", "expected_performance": "BUENA", "description": "Mercados emergentes con potencial"},
    "tier_3": {"countries": ["MX", "ES", "AR", "CO", "CL", "PE", "IN", "ID", "NG", "KE", "EG", "MA"], "priority": "MODERADA", "scraping_intensity": "LIGERO", "expected_performance": "VARIABLE", "description": "Mercados en desarrollo"}
}
HIGH_PERFORMING_NICHES = {
    "religious": {"performance": "EXCELENTE", "best_countries": ["BR"], "cristian_note": "Los que mejor performan en Brasil", "keywords": ["biblia", "oracion", "fe", "cristiano", "iglesia"]},
    "make_money": {"performance": "EXCELENTE", "best_countries": ["US", "GB", "CA"], "keywords": ["make money", "passive income", "affiliate marketing", "dropshipping"]},
    "health_fitness": {"performance": "MUY BUENA", "universal": True, "keywords": ["weight loss", "fitness", "diet", "health", "workout"]},
    "business": {"performance": "BUENA", "best_countries": ["US", "GB", "DE"], "keywords": ["business", "entrepreneur", "marketing", "sales"]}
}
LANGS = {"Espa√±ol": "spanish", "Portugu√©s": "portuguese", "Ingl√©s": "english", "Franc√©s": "french", "Alem√°n": "german"}
LANG2ISO = {"spanish": "es", "portuguese": "pt", "english": "en", "french": "fr", "german": "de"}
PAISES_SPANISH = ["ES", "MX", "AR", "CO", "CL", "PE"]
PAISES_PORTUGUESE = ["BR"]
PAISES_ENGLISH = ["US", "CA", "GB", "AU", "NZ", "ZA", "NG", "KE"]
PAISES_FRENCH = ["FR", "CA", "MA"]
PAISES_GERMAN = ["DE", "NL"]
COUNTRY2NAME = {
    "US": "Estados Unidos", "CA": "Canad√°", "MX": "M√©xico", "GB": "Reino Unido", "DE": "Alemania", "ES": "Espa√±a",
    "NL": "Pa√≠ses Bajos", "FR": "Francia", "CN": "China", "IN": "India", "JP": "Jap√≥n", "KR": "Corea del Sur",
    "ID": "Indonesia", "BR": "Brasil", "AR": "Argentina", "CO": "Colombia", "CL": "Chile", "PE": "Per√∫",
    "AU": "Australia", "NZ": "Nueva Zelanda", "ZA": "Sud√°frica", "NG": "Nigeria", "KE": "Kenia", "EG": "Egipto", "MA": "Marruecos"
}
ALL_COUNTRIES = list(COUNTRY2NAME.keys())
UA_LIST = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0"
]

# ==========================================
# MEJORA: GESTI√ìN DE DRIVER DE SELENIUM
# ==========================================

def get_session_driver(incognito=False):
    """Obtiene el driver desde st.session_state o lo crea si no existe."""
    if 'driver' not in st.session_state or st.session_state.driver is None:
        st.write("üîß Inicializando nuevo driver de Selenium...")
        options = Options()
        options.add_argument("--headless=new")
        options.add_argument("--no-sandbox")
        options.add_argument("--disable-dev-shm-usage")
        options.add_argument("--disable-gpu")
        options.add_argument(f"--user-agent={random.choice(UA_LIST)}")
        if incognito:
            options.add_argument("--incognito")
        try:
            driver = webdriver.Chrome(options=options)
            st.session_state.driver = driver
        except Exception as e:
            st.error(f"‚ùå No se pudo inicializar el driver de Chrome. Aseg√∫rate de que est√© instalado y accesible en tu PATH. Error: {e}")
            st.session_state.driver = None
            return None
    return st.session_state.driver

def quit_session_driver():
    """Cierra el driver y lo elimina del session_state."""
    if 'driver' in st.session_state and st.session_state.driver:
        st.session_state.driver.quit()
        st.session_state.driver = None
        st.info("‚úÖ Driver de Selenium cerrado.")

# ==========================================
# FUNCIONES DE UTILIDAD (CON CACHING)
# ==========================================

def assess_product_complexity(description):
    text_lower = description.lower()
    simple_indicators = ["ebook", "pdf", "gu√≠a", "guide", "manual", "prompts", "plantilla", "template"]
    complex_indicators = ["aplicaci√≥n", "application", "plataforma", "platform", "software", "app", "sistema complejo", "saas"]
    medium_indicators = ["curso", "course", "video", "training", "masterclass", "webinar"]
    
    if any(indicator in text_lower for indicator in complex_indicators):
        return {"complexity": "COMPLEJA", "recommendation": "‚ùå EVITAR - Bandera roja", "reason": "Muy dif√≠cil de modelar", "color": "üî¥"}
    elif any(indicator in text_lower for indicator in simple_indicators):
        return {"complexity": "SIMPLE", "recommendation": "‚úÖ MODELAR - F√°cil de replicar", "reason": "Ideal para espionaje viral", "color": "üü¢"}
    elif any(indicator in text_lower for indicator in medium_indicators):
        return {"complexity": "MEDIA", "recommendation": "‚ö†Ô∏è CONSIDERAR - Revisar", "reason": "Evaluar caso por caso", "color": "üü°"}
    else:
        return {"complexity": "DESCONOCIDA", "recommendation": "‚ùì REVISAR MANUALMENTE", "reason": "Necesita an√°lisis manual", "color": "‚ö™"}

def validate_viral_offer(total_ads, duplications):
    if total_ads >= 100: status, confidence, action, priority = "üî• S√öPER VIRAL", "M√ÅXIMA", "MODELAR INMEDIATAMENTE", 1
    elif total_ads >= 50: status, confidence, action, priority = "üöÄ MUY VIRAL", "ALTA", "MODELAR HOY", 2
    elif total_ads >= 30: status, confidence, action, priority = "‚úÖ VIRAL", "BUENA", "MODELAR EN 24H", 3
    elif total_ads >= 10: status, confidence, action, priority = "‚ö†Ô∏è POSIBLE", "MEDIA", "INVESTIGAR M√ÅS", 4
    else: status, confidence, action, priority = "‚ùå EVITAR", "BAJA", "BUSCAR OTROS", 5
    
    duplication_bonus = " + ALTA DUPLICACI√ìN" if duplications >= 10 else " + DUPLICACI√ìN MEDIA" if duplications >= 5 else ""
    
    return {"status": status + duplication_bonus, "confidence": confidence, "action": action, "priority": priority, "cristian_approved": total_ads >= 30 and duplications >= 5}

def speed_alert_system(product_found_time=None):
    if product_found_time is None: product_found_time = datetime.now()
    hours_passed = (datetime.now() - product_found_time).total_seconds() / 3600
    if hours_passed > 24: return {"status": "üö® CR√çTICO", "message": f"Han pasado {hours_passed:.1f}h - Oferta puede estar quemada", "action": "VERIFICAR SI A√öN FUNCIONA", "color": "red"}
    elif hours_passed > 12: return {"status": "‚ö†Ô∏è URGENTE", "message": f"Quedan {24-hours_passed:.1f}h - Acelerar modelado", "action": "MODELAR HOY", "color": "orange"}
    else: return {"status": "‚úÖ TIEMPO", "message": f"Tiempo restante: {24-hours_passed:.1f}h", "action": "PROCEDER SEG√öN PLAN", "color": "green"}

def get_country_tier_info(country_code):
    for tier_name, tier_data in COUNTRY_TIERS.items():
        if country_code in tier_data["countries"]:
            return {"tier": tier_name, "priority": tier_data["priority"], "performance": tier_data["expected_performance"], "description": tier_data["description"]}
    return {"tier": "unknown", "priority": "BAJA", "performance": "DESCONOCIDA"}

@st.cache_data # MEJORA: Cache para evitar traducciones repetitivas
def traducir_palabras(palabras, idioma_destino):
    if idioma_destino == "spanish": return palabras
    iso_code = LANG2ISO.get(idioma_destino, "en")
    try:
        translator = GoogleTranslator(source="es", target=iso_code)
        traducidas = translator.translate_batch(list(palabras))
        return traducidas if traducidas else palabras
    except Exception as e:
        st.warning(f"Error traduciendo a {idioma_destino}: {e}. Usando palabras originales.")
        return palabras

# ==========================================
# L√ìGICA DE SCRAPING REFACTORIZADA Y CON CACHING
# ==========================================

@st.cache_data(ttl=3600) # Cachear por 1 hora
def _count_ads_logic(keyword, country):
    """Funci√≥n interna con la l√≥gica de scraping, para ser cacheada."""
    driver = get_session_driver()
    if not driver: return 0
    
    try:
        url = f"https://www.facebook.com/ads/library/?active_status=all&ad_type=all&country={country}&q={keyword}&sort_data[direction]=desc&sort_data[mode]=relevancy_monthly_grouped&search_type=keyword_unordered&media_type=all"
        driver.get(url)
        wait = WebDriverWait(driver, 15)
        result_element = wait.until(EC.presence_of_element_located((By.XPATH, "//div[contains(text(), ' result') or contains(text(), ' resultado')]")))
        numbers = re.findall(r'\d{1,3}(?:,\d{3})*|\d+', result_element.text)
        return int(numbers[0].replace(',', '').replace('.', '')) if numbers else 0
    except TimeoutException:
        return 0 # No results found or page didn't load
    except Exception as e:
        st.error(f"Error en _count_ads_logic para '{keyword}' en {country}: {e}")
        return 0

def count_ads_quick(keyword, country):
    """Funci√≥n p√∫blica que usa la l√≥gica cacheada."""
    return _count_ads_logic(keyword, country)

@st.cache_data(ttl=3600)
def _obtener_anuncios_logic(keyword, country, max_cards):
    """Funci√≥n interna de scraping de anuncios para ser cacheada."""
    driver = get_session_driver()
    if not driver: return []
    
    anuncios = []
    try:
        url = f"https://www.facebook.com/ads/library/?active_status=all&ad_type=all&country={country}&q={keyword}&sort_data[direction]=desc&sort_data[mode]=relevancy_monthly_grouped&search_type=keyword_unordered&media_type=all"
        driver.get(url)
        time.sleep(3)
        for _ in range(3):
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)
            
        cards = driver.find_elements(By.CSS_SELECTOR, "div[data-testid='ad-library-card']")
        
        for card in cards[:max_cards]:
            try:
                copy_text = card.find_element(By.CSS_SELECTOR, "div[data-testid='ad-library-card-copy-text']").text
                link = card.find_element(By.CSS_SELECTOR, "a[data-testid='ad-library-card-cta-button']").get_attribute("href")
                complexity = assess_product_complexity(copy_text)
                anuncios.append({
                    "Copy": copy_text[:300] + "..." if len(copy_text) > 300 else copy_text,
                    "Link": link,
                    "Complejidad": complexity["complexity"],
                    "Recomendaci√≥n": complexity["recommendation"],
                    "Color": complexity["color"]
                })
            except (NoSuchElementException, TimeoutException):
                continue
    except Exception as e:
        st.error(f"Error en _obtener_anuncios_logic para '{keyword}' en {country}: {e}")
    return anuncios

def obtener_anuncios(keyword, country, max_cards=15):
    """Funci√≥n p√∫blica que usa la l√≥gica cacheada."""
    return _obtener_anuncios_logic(keyword, country, max_cards)

# ==========================================
# INTERFAZ STREAMLIT
# ==========================================

st.title("üöÄ Mega Buscador PEV (Refactorizado)")
st.markdown("### *Metodolog√≠a de Espionaje Viral Mejorada y Optimizada*")

st.sidebar.header("üéØ METODOLOG√çA CRISTIAN")
st.sidebar.info("Esta versi√≥n incluye mejoras de rendimiento y usabilidad.")

menu = st.sidebar.radio("Selecciona una opci√≥n:", [
    "üöÄ Gu√≠a de Inicio R√°pido", "üìä Demanda por Pa√≠s (Mejorado)", "üí° Frases Clave Cristian", 
    "üîé B√∫squeda General", "üî¨ An√°lisis Profundo (Viralidad)", "üïµÔ∏è‚Äç‚ôÇÔ∏è An√°lisis de Competidores", 
    "üßÆ Calculadora de Rentabilidad", "üìã Checklist del Proceso", "üéØ Nichos de Alto Rendimiento"
])

# Bot√≥n para cerrar el driver en la barra lateral
st.sidebar.button("Terminar Sesi√≥n y Cerrar Navegador", on_click=quit_session_driver, type="secondary")


# ==========================================
# M√ìDULOS DE LA APLICACI√ìN (Selecci√≥n del Men√∫)
# ==========================================

if menu == "üöÄ Gu√≠a de Inicio R√°pido":
    # ... (Sin cambios en esta secci√≥n, es contenido est√°tico) ...
    st.header("üöÄ Gu√≠a de Inicio R√°pido - Metodolog√≠a Cristian")
    st.markdown("...") # Contenido de la gu√≠a

elif menu == "üìä Demanda por Pa√≠s (Mejorado)":
    st.header("üìä An√°lisis de Demanda por Pa√≠s - Con Priorizaci√≥n por Tiers")
    
    # ... (sin cambios en la visualizaci√≥n de Tiers) ...
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("### üî• TIER-1 (Prioridad M√°xima)")
        st.json(COUNTRY_TIERS['tier_1'], expanded=False)
    with col2:
        st.markdown("### ‚≠ê TIER-2 (Alta Prioridad)")
        st.json(COUNTRY_TIERS['tier_2'], expanded=False)
    with col3:
        st.markdown("### üìù TIER-3 (Prioridad Moderada)")
        st.json(COUNTRY_TIERS['tier_3'], expanded=False)
    st.markdown("---")

    # MEJORA: Mostrar resultados previos si existen en la sesi√≥n
    if 'demand_results_df' in st.session_state:
        st.markdown("### üìà Resultados del √öltimo An√°lisis")
        st.dataframe(st.session_state.demand_results_df, use_container_width=True)
        # Re-generar gr√°fico
        df_chart = st.session_state.demand_results_df.sort_values("Anuncios", ascending=False).head(20)
        fig, ax = plt.subplots(figsize=(12, 8))
        tier_colors = {"TIER_1": "#ff4444", "TIER_2": "#ffaa44", "TIER_3": "#44aaff", "UNKNOWN": "#cccccc"}
        colors = [tier_colors.get(tier.upper(), "#cccccc") for tier in df_chart["Tier"]]
        ax.barh(df_chart["Pa√≠s"] + " - " + df_chart["Keyword"], df_chart["Anuncios"], color=colors)
        ax.invert_yaxis()
        ax.set_xlabel("N√∫mero de Anuncios")
        ax.set_title("Top 20 Demanda por Pa√≠s y Keyword")
        st.pyplot(fig)
        st.markdown("---")

    # Configuraci√≥n de b√∫squeda
    col1, col2 = st.columns([2, 3])
    with col1:
        # ... (sin cambios en la UI de selecci√≥n) ...
        idioma_base = st.selectbox("Idioma base:", list(LANGS.keys()), key="demand_lang")
        keywords_input = st.text_area("Keywords/Frases (separadas por coma):", "acceso inmediato a, gu√≠a completa, descargar ahora gratis", key="demand_kw")

    with col2:
        # ... (sin cambios en la UI de selecci√≥n) ...
        include_tier1 = st.checkbox("üî• Incluir TIER-1", value=True, key="d_t1")
        include_tier2 = st.checkbox("‚≠ê Incluir TIER-2", value=False, key="d_t2")
        include_tier3 = st.checkbox("üìù Incluir TIER-3", value=False, key="d_t3")
        # ... L√≥gica para construir paises_selected ...
        paises_selected = []
        if include_tier1: paises_selected.extend(COUNTRY_TIERS["tier_1"]["countries"])
        if include_tier2: paises_selected.extend(COUNTRY_TIERS["tier_2"]["countries"])
        if include_tier3: paises_selected.extend(COUNTRY_TIERS["tier_3"]["countries"])
        paises_final = st.multiselect("Pa√≠ses a analizar:", ALL_COUNTRIES, default=list(set(paises_selected)), format_func=lambda x: f"{x} - {COUNTRY2NAME[x]}")

    traducir_auto = st.checkbox("Traducir autom√°ticamente", value=True, key="demand_translate")
    
    if st.button("üîç Medir Demanda", type="primary"):
        if keywords_input and paises_final:
            driver = get_session_driver() # Inicia el driver si no existe
            if driver:
                keywords = [kw.strip() for kw in keywords_input.split(",")]
                
                progress_bar = st.progress(0, text="Iniciando an√°lisis...")
                resultados = []
                total_jobs = len(paises_final)
                
                for i, pais in enumerate(paises_final):
                    progress_text = f"Analizando {COUNTRY2NAME[pais]} ({pais})... ({i+1}/{total_jobs})"
                    progress_bar.progress((i + 1) / total_jobs, text=progress_text)
                    
                    tier_info = get_country_tier_info(pais)
                    # L√≥gica de traducci√≥n aqu√≠
                    idioma_pais = next((lang for lang, paises in [("portuguese", PAISES_PORTUGUESE), ("english", PAISES_ENGLISH), ("french", PAISES_FRENCH), ("german", PAISES_GERMAN)] if pais in paises), "spanish")
                    keywords_traducidas = traducir_palabras(tuple(keywords), idioma_pais) if traducir_auto else keywords

                    for keyword in keywords_traducidas:
                        count = count_ads_quick(keyword, pais)
                        if count > 0: # Solo agregar si hay resultados
                            viral_status = validate_viral_offer(count, 0)
                            resultados.append({
                                "Pa√≠s": COUNTRY2NAME[pais], "C√≥digo": pais, "Tier": tier_info["tier"], 
                                "Prioridad": tier_info["priority"], "Keyword": keyword, "Anuncios": count,
                                "Estado Viral": viral_status["status"], "Acci√≥n": viral_status["action"]
                            })
                
                progress_bar.empty()
                if resultados:
                    df = pd.DataFrame(resultados)
                    tier_order = {"tier_1": 1, "tier_2": 2, "tier_3": 3, "unknown": 4}
                    df["Orden"] = df["Tier"].map(tier_order)
                    df = df.sort_values(["Orden", "Anuncios"], ascending=[True, False]).drop("Orden", axis=1)
                    
                    st.session_state.demand_results_df = df # MEJORA: Guardar en sesi√≥n
                    st.rerun() # Volver a correr el script para mostrar los resultados al inicio
                else:
                    st.warning("No se encontraron anuncios para los criterios seleccionados.")
        else:
            st.error("Por favor, ingresa keywords y selecciona pa√≠ses.")

# ... resto de los m√≥dulos ...
# Para los dem√°s m√≥dulos, la idea es similar:
# 1. Llamar a `get_session_driver()` al inicio de una operaci√≥n de scraping.
# 2. Usar las funciones refactorizadas que aceptan el `driver` o que ya lo usan internamente.
# 3. Guardar resultados importantes en `st.session_state` para persistencia.
# 4. Reemplazar HTML inseguro por componentes de Streamlit.

elif menu == "üî¨ An√°lisis Profundo (Viralidad)":
    st.header("üî¨ An√°lisis Profundo - Detector de Viralidad")
    # ... (contenido est√°tico) ...

    url_analisis = st.text_input("URL de Facebook Ads Library:", placeholder="https://www.facebook.com/ads/library/?...")
    
    if st.button("üî¨ Analizar Viralidad", type="primary"):
        if url_analisis:
            driver = get_session_driver()
            if driver:
                with st.spinner("Analizando p√°gina... Esto puede tomar unos minutos"):
                    driver.get(url_analisis)
                    # ... L√≥gica de scroll ...
                    st.write("Cargando contenido...")
                    for _ in range(5):
                        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
                        time.sleep(2)

                    # ... L√≥gica de extracci√≥n de tarjetas ...
                    cards = driver.find_elements(By.CSS_SELECTOR, "div[data-testid='ad-library-card']")
                    st.success(f"üìä Encontradas {len(cards)} tarjetas de anuncio")

                    # MEJORA: Usar st.container en lugar de HTML inseguro
                    # (L√≥gica para procesar las tarjetas y encontrar duplicados)
                    contenidos = {}
                    anuncios_procesados = []
                    # ... (c√≥digo para rellenar anuncios_procesados) ...

                    # Ejemplo de c√≥mo mostrar un resultado
                    for anuncio in sorted(anuncios_procesados, key=lambda x: x["Duplicaciones"], reverse=True):
                        with st.container(border=True):
                            col1, col2 = st.columns([1, 4])
                            with col1:
                                st.metric(label="Duplicaciones", value=anuncio['Duplicaciones'])
                                st.markdown(f"**{anuncio['Color']} {anuncio['Complejidad']}**")
                            with col2:
                                st.markdown(f"**Copy:** {anuncio['Copy'][:250]}...")
                                st.info(f"**Recomendaci√≥n:** {anuncio['Recomendaci√≥n']}")
        else:
            st.error("Por favor, ingresa una URL v√°lida")
            
# A√ëADIR UN RECORDATORIO PARA EL requirements.txt
st.sidebar.markdown("---")
st.sidebar.markdown("### ‚öôÔ∏è Dependencias")
st.sidebar.code("""
# requirements.txt
streamlit
pandas
matplotlib
selenium
deep-translator
""")
st.sidebar.markdown("Ejecuta `pip install -r requirements.txt` para instalar.")